// import { varchar, date, integer, pgTable } from 'drizzle-orm/pg-core';
// export const usersTable = pgTable('users', {
//   id: integer().primaryKey().generatedAlwaysAsIdentity({ startWith: 1000 }),
//   name: varchar({ length: 255 }).notNull(),
//   email: varchar({ length: 255 }).notNull().unique(),
// });

// export const subscriptionsTable = pgTable('subscriptions', {
//   id: integer().primaryKey().generatedAlwaysAsIdentity({ startWith: 1000 }),
//   name: varchar({ length: 255 }).notNull(),
//   cost: integer().notNull(),
//   cycle: varchar({ length: 255 }).notNull(),
//   dueDate: date({ mode: 'date' }).notNull(),
//   createdAt: date({ mode: 'date' }).notNull(),
//   icon: varchar({ length: 255 }),
//   userId: integer('userId').references(() => usersTable.id),
// });

// export type subscriptions = typeof subscriptionsTable.$inferSelect;

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
}

enum Cycle {
    MONTHLY
    YEARLY
    WEEKLY
    DAILY
}
enum Status {
    ACTIVE
    INACTIVE
}

model Subscription {
    id        Int      @id @default(autoincrement())
    name      String
    cost      Int
    cycle     Cycle    @default(MONTHLY)
    startDate DateTime
    dueDate   DateTime
    icon      String?
    status    Status   @default(ACTIVE)
    description String?
    tags      String[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    user_id   String
}

model User {
    user_id      String         @id
    email        String         @unique
    name         String?
    subscription Subscription[]
}
